inp = '1234'
inp_repeat = 10
inp *= inp_repeat
# print(inp)


### Don't fucking get the math here

from itertools import cycle, accumulate
def level2():
    s = '59791871295565763701016897619826042828489762561088671462844257824181773959378451545496856546977738269316476252007337723213764111739273853838263490797537518598068506295920453784323102711076199873965167380615581655722603274071905196479183784242751952907811639233611953974790911995969892452680719302157414006993581489851373437232026983879051072177169134936382717591977532100847960279215345839529957631823999672462823375150436036034669895698554251454360619461187935247975515899240563842707592332912229870540467459067349550810656761293464130493621641378182308112022182608407992098591711589507803865093164025433086372658152474941776320203179747991102193608'
    offset = int(s[:7])
    digits = [int(i) for i in s]
    # If `rep` is `digits` repeated 10K times, construct: 
    #     arr = [rep[-1], rep[-2], ..., rep[offset]]
    l = 10000 * len(digits) - offset
    i = cycle(reversed(digits))
    arr = [next(i) for _ in range(l)]
    # Repeatedly take the partial sums mod 10
    for loop in range(100):
        print(loop)
        arr = [abs(n) % 10 for n in accumulate(arr)]
    return "".join(str(i) for i in arr[-1:-9:-1])
print(level2())